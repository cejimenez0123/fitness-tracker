// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Workout {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  user  User      @relation(fields: [userId], references: [id])
  userId String    @db.ObjectId
  logs Log[]
  workoutExercises WorkoutExercise[]
}

model User {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  email String   @unique
  name String
  password String
  workouts Workout[]
  exercises Exercise[]
  activities Activity[]
  logs Log[]
  created DateTime @default(now())
}
model WorkoutExercise{
    id String   @id @default(auto()) @map("_id") @db.ObjectId
    workout Workout  @relation(fields: [workoutId], references: [id])
    workoutId String  @db.ObjectId
    exercise Exercise @relation(fields: [exerciseId],references: [id])
    exerciseId String @db.ObjectId
}

model Log{
    id  String    @id @default(auto()) @map("_id") @db.ObjectId
    workout Workout?  @relation(fields: [workoutId], references: [id])
    workoutId String?  @db.ObjectId
    user User @relation(fields: [userId], references: [id])
    userId String @db.ObjectId
    date DateTime @default(now())
    activities Activity[]
}

model Exercise {
  id  String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  user  User      @relation(fields: [userId], references: [id])
  userId String    @db.ObjectId
  activities Activity[]
  muscle Muscle @default(CARDIO)
  workoutExercises WorkoutExercise[]
  type Type @default(REPS)

}
model Activity{
    id String    @id @default(auto()) @map("_id") @db.ObjectId
    exercise Exercise @relation(fields: [exerciseId],references: [id])
    exerciseId String @db.ObjectId
    user User @relation(fields: [userId], references: [id])
    userId String @db.ObjectId
    log Log @relation(fields: [logId],references: [id])
    logId String @db.ObjectId
    sets Set[]
    date DateTime @default(now())
}
model Set{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  activity Activity @relation(fields: [activityId],references: [id])
  activityId String @db.ObjectId
  weight Int?
  reps Int
}

enum Type {
  BARBELL
  DUMBBELL
  MACHINE
  WEIGHTED
  ASSISTEDWEIGHT
  REPS
  CARDIO
  DURATION
}
enum Muscle {
  CORE
  ARMS
  BACK
  CHEST
  LEGS
  SHOULDERS
  FULLBODY
  OTHER
  CARDIO
}